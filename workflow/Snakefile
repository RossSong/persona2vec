from os.path import join as osjoin
from itertools import product
import numpy as np

# Main paths
PROJ_HOME = open('PROJ_HOME_DIR').read().strip()
DATA_DIR = osjoin(PROJ_HOME, 'graph')


# Raw dataset
NETWORK_LIST = ['ca-HepTh', 'ca-AstroPh', 'ppi']
DIRECTED = False #directed and undireced netwoek must be sperated.
INPUT_FILE_LIST = [osjoin(DATA_DIR, network_name + '.elist')
                   for network_name in NETWORK_LIST]

# Splitted dataset
NUMBER_OF_TEST_SET = 10
SPLITTED_FILE_DIRS = [osjoin(DATA_DIR, network_name + '_' + str(index))
                      for index in range(NUMBER_OF_TEST_SET) for network_name in NETWORK_LIST]
RESULT_FILES = [osjoin(directory, 'result.tsv')
                          for directory in SPLITTED_FILE_DIRS]
                          
REPETITION_PER_SAMPLE = 5
NUMBER_OF_WORKERS_FOR_TRAINING = 4
LAMBDS = np.linspace(0.1, 1, 10)
DIMS = [8, 16, 32, 64, 128, 256]

rule all:
    input:
        RESULT_FILES

rule link_prediction:
    input:
        osjoin(DATA_DIR, "{name}_{index}", "network.elist"),
        osjoin(DATA_DIR, "{name}_{index}", "test_edges.tsv"),
        osjoin(DATA_DIR, "{name}_{index}", "negative_edges.tsv"),
    output:
        osjoin(DATA_DIR, "{name}_{index}", "result.tsv"),
    run:
        for lambd, dim in product(*[LAMBDS, DIMS]):
            shell(
                'python3 script/link_prediction.py {input} {output} {lambd} {dim} {NUMBER_OF_WORKERS_FOR_TRAINING} {REPETITION_PER_SAMPLE}')


rule train_test_set_split:
    input:
        osjoin(DATA_DIR, "{name}.elist")
    output:
        osjoin(DATA_DIR, "{name}_{index}", "network.elist"),
        osjoin(DATA_DIR, "{name}_{index}", "test_edges.tsv"),
        osjoin(DATA_DIR, "{name}_{index}", "negative_edges.tsv")

    run:
        shell(
            'python3 script/train_test_set_split.py {input} {wildcards.index}')

